!!! Concrete Syntax
In order to simplify our task, we decide to build an embedded DSL instead of building a whole parser with a parser framework like PetitParser.

We reuse as much as possible the facilities provided by Pharo (like dynamic arrays and class extensions), in order to build a declarative API. The template to build an ArduinoML program is as follows.

[[[language=smalltalk
#youAppName arduinoApp
    bricks:
        {
        ...
        };
    states:
        {
        ...
        };
    transitions:
        {
        ...
        }
]]]

You need to provide the name of your application (#youAppName), a list of bricks, states and transitions. These lists can be written in whatever order you want.

In order to describe bricks (sensors or actuactors), you need the name of the brick and the bounding pin. For example, if you want to plug the button named ==button1== to pin number 9, you wrote: 

[[[language=smalltalk
#button1 sensorOnPin: 9.
]]]

There is a also a syntax for actuators:
[[[language=smalltalk
#greenLed actuatorOnPin: 13.
]]]

Beware: at the moment, no control is done for the name of bricks and their bounding pins. The same name or pins can be reused many times.

!!! How to build a model

The ==build== method from the ==AMLAppBuilder== class, create an ArduinoML model from an instance of the DSL. This basically what is done when you parse a string to generate an AST. From a concrete syntax, we are able to generate an instance of an abstract syntax.

Let's try to have a look how this works more practically:

[[[
AMLAppBuilder>>build
	| app |
	app := AMLApp new
		amlName: appName;
		bricks: bricks.
	states
		do: [ :eachState | 
			eachState actions
				do: [ :eachAction | 
					eachAction
						actuator: (app bricks detect: [ :each | each amlName == eachAction actuator ]) ] ].
	app states: states.
	 transitions
				do: [ :eachTransition | 
					eachTransition
						sensor: (app bricks detect: [ :each | each amlName == eachTransition sensor ]).
					eachTransition
						next: (app states detect: [ :each | each amlName == eachTransition next ]) ].
	transitions isEmpty
		ifFalse: [
			states
				do: [ :eachState | 
					eachState
						transition: (transitions detect: [ :each | each amlName == eachState amlName ]) ] ].
	^ app
]]]

The method is a bit long but this where all the work is done.
