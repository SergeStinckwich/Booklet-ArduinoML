In order to generate *Wiring>https://en.wikipedia.org/wiki/Wiring_(development_platform)* code from an ArduinoML model, we are using here the Visitor Pattern.
This pattern is a way of separating an algorithm from an object structure on
which it operates.

In order to allow visits on ArduinoML model, we need to add an ==accept: aVisitor== method to each
classes deriving from the root class : ==AMLEntity==

For example: 

[[[language=smalltalk
AMLAction>>accept: aVisitor
	^ aVisitor visitAction: self
]]]

It means that each Visitor an an ArduinoML model will have to implement the
visitXXX actions where XXX is one of class AMLXXX.

For the AMLEntity class we implement an accept: method who is an abstract
method, because there is no objects of this class.

[[[language=smalltalk
AMLEntity>>accept: aVisitor
	self subclassResponsibility
]]]

Let's start to implement a visitor to generate Wiring code from ArduinoML
model. We will implement a class named ==AMLArduinoCodeVisitor==. This visit will
traverse an ArduinoML and generate a stream${footnote:We use Stream instead of String, because this is more efficient to use streams to concatenate strings.}$.

Only 2 visiting methods are needed : ==visitApp:== and ==visitState:==.

For each brick of an ==AMLApp==, we generate the code of a global variable definition, then we generate the code of the setup with ==formatSetup:== and for each states, the visitor visit corresponding objects. Finally, the code of the loop is generated.

[[[language=smalltalk
visitApp: anAMLApp
	anAMLApp bricks
		do: [ :each | 
			self formatGlobalVariable: each.
			stream nextPut: Character cr ].
	self formatSetup: anAMLApp.
	stream nextPut: Character cr.
	anAMLApp states
		do: [ :each | 
			self visitState: each.
			stream nextPut: Character cr ].
	self formatLoop: anAMLApp
]]]

For each state, we have the following method:
[[[language=smalltalk
AMLArduinoCodeVisitor>>visitState: anAMLState
	self formatState: anAMLState
]]]

==formatGlobalVariable== generate a String declaring a Wiring global variable:

[[[language=smalltalk
AMLArduinoCodeVisitor>>formatGlobalVariable: anAMLBrick
	stream nextPutAll: 'int '.
	stream nextPutAll: anAMLBrick amlName.
	stream nextPutAll: ' = '.
	stream nextPutAll: (anAMLBrick pin) asString.
	stream nextPutAll: ';'
]]]

for example :

[[[language=smalltalk
	| result app |
	app := #myApp arduinoApp
		bricks: {#led actuatorOnPin: 12};
		build.
	result := AMLArduinoCodeVisitor new formatGlobalVariable: app bricks first.
]]]

result contains the String : 'int led = 12;'
